[{"path":"/articles/antibody_kinetics_models.html","id":"antibody-kinetics-models","dir":"Articles","previous_headings":"","what":"Antibody kinetics models","title":"Antibody kinetics models","text":"","code":"library(seroepirecipes) library(ggplot2) library(patchwork) library(dplyr) #> Warning: package 'dplyr' was built under R version 4.2.3"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/articles/antibody_kinetics_models.html","id":"antibody-kinetics-models-1","dir":"Articles","previous_headings":"Antibody kinetics models > The model","what":"Antibody kinetics models","title":"Antibody kinetics models","text":"","code":"times <- seq(0,365,by=0.1)  pars_power <- c(t_peak=21, peak=10^5, r=1.25,v=0.001,k=0,y0=1) y1 <- data.frame(y=kinetics_power_function(times,pars_power),t=times,ver=\"Power function (Teunis et al. 2016)\") pars_simple <- c(a=0.3,b=0.05,c=0.25,ymax=10000,t_peak=18) y2 <- data.frame(y=kinetics_simple(times,pars_simple),t=times,ver=\"Simple model (Singanayagam et al. 2021)\")  pars_ranjeva <- c(y0=1,peak=80,k=0,t_peak=28,w=0.008,frac=0.5) y3 <- data.frame(y=kinetics_ceiling(times,pars_ranjeva),t=times,ver=\"Biphasic model (Ranjeva et al. 2019)\")  pars_ode <- c(\"A\"=0,\"beta\"=100,\"rho\"=0.25,\"c_s\"=0.25,\"c_l\"=0.1,\"delta\"=0,\"r\"=0.001) y4 <- data.frame(y=kinetics_simple_ode(times,pars_ode),t=times,ver=\"ODE model (Pelleau et al. 2021)\")  pars_gamma <- c(\"y0\"=0,\"peak\"=300,\"shape\"=1.2,\"scale\"=50) y5 <- data.frame(y=kinetics_gamma(times,pars_gamma),t=times,ver=\"Gamma function (Zhao et al. 2018)\")  pars_piecewise <- c(\"t_i\"=0,\"tp\"=21,\"mu\"=8,\"dp\"=0.2,\"ts\"=50,\"m\"=0.0075,\"lower_bound\"=0, \"y0\"=0) y6 <- data.frame(y=kinetics_piecewise(times,pars_piecewise),t=times,ver=\"Piecewise linear (Hay et al. 2019)\")  y <- bind_rows(y1, y2, y3, y4, y5, y6) y$y[!is.finite(y$y)] <- 0  y <- y %>% mutate(log_y = if_else(ver == \"Piecewise linear (Hay et al. 2019)\", y, log(y)), y = if_else(ver==\"Piecewise linear (Hay et al. 2019)\", exp(y), y))  p1 <- ggplot(y) + geom_line(aes(x=t,y=y)) + facet_wrap(~ver,scales=\"free\") + ylab(\"Antibody level\") p2 <- ggplot(y) + geom_line(aes(x=t,y=log_y)) + facet_wrap(~ver,scales=\"free\") + ylab(\"Log antibody level\") p1/p2"},{"path":[]},{"path":[]},{"path":[]},{"path":"/articles/serocatalytic_model.html","id":"serocatalytic-models","dir":"Articles","previous_headings":"","what":"Serocatalytic models","title":"Serocatalytic models","text":"","code":"library(seroepirecipes) library(rstan) #> Loading required package: StanHeaders #>  #> rstan version 2.32.3 (Stan version 2.26.1) #> For execution on a local, multicore CPU with excess RAM we recommend calling #> options(mc.cores = parallel::detectCores()). #> To avoid recompilation of unchanged Stan programs, we recommend calling #> rstan_options(auto_write = TRUE) #> For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions, #> change `threads_per_chain` option: #> rstan_options(threads_per_chain = 1) library(bayesplot) #> This is bayesplot version 1.10.0 #> - Online documentation and vignettes at mc-stan.org/bayesplot #> - bayesplot theme set to bayesplot::theme_default() #>    * Does _not_ affect other ggplot2 plots #>    * See ?bayesplot_theme_set for details on theme setting"},{"path":"/articles/serocatalytic_model.html","id":"introduction","dir":"Articles","previous_headings":"Serocatalytic models","what":"Introduction","title":"Serocatalytic models","text":"Serocatalytic models used model seroprevalence time age cross-sectional serosurveys function Force Infection (FOI) – per capita rate (per year) susceptible individuals seroconvert either infection vaccination. vignette, demonstrate simple serocatalytic model can fitted age-stratified seroprevalence data using frequentist framework (using glm) Bayesian framework (using Stan).","code":""},{"path":"/articles/serocatalytic_model.html","id":"other-resources","dir":"Articles","previous_headings":"Serocatalytic models","what":"Other resources","title":"Serocatalytic models","text":"two R packages fitting serocatalytic models seroprevalence data: serofoi Rsero. packages provide implementations basic serocatalytic model common extensions. excellent resource learning serocatalytic model Chapter 4 textbook Epidemics: Models Data using R Ottar N. Bjørnstad.","code":""},{"path":"/articles/serocatalytic_model.html","id":"data-requirements","dir":"Articles","previous_headings":"Serocatalytic models","what":"Data requirements","title":"Serocatalytic models","text":"Data requirements serocatalytic model simple: minimum variables required proportion seropositive individuals stratified age group. Note inferences can drawn time periods individuals sample alive. Additionally, seropositivity multiple timepoints can allow assessment changes FOI time. Differences FOI sub-populations demographic groups can also measured using serocatalytic models (see Table 1) Table 1 : Minimum variables required serocatalytic model depending use case","code":""},{"path":"/articles/serocatalytic_model.html","id":"the-model","dir":"Articles","previous_headings":"Serocatalytic models","what":"The model","title":"Serocatalytic models","text":"simplest catalytic model assumes: FOI constant across ages time seroreversion (individuals become seropositive, remain seropositive indefinitely) boosting antibody response (individuals either seropositive seronegative) cross-reactivity pathogens population size stable model, rate change susceptible individuals (\\(S\\)) age (\\(\\)) expressed : \\[ \\frac{dS}{dt} = -\\lambda S() \\] \\(\\lambda\\) constant FOI. proportion population seropositive age \\(\\), \\(\\pi()\\) can solved : \\[ \\pi()= 1-exp(-\\lambda ) \\] Note either age (\\(\\)) time (\\(t\\)) used example . definition seropositivity important – quantitative semi-quantitative assays ELISA, threshold must chosen individuals considered seropositive. threshold usually based known antibody measurement distributions individuals known exposed .","code":""},{"path":"/articles/serocatalytic_model.html","id":"example-seroprevalence-of-measles-neutralising-antibodies-in-new-haven-usa-in-the-1950s","dir":"Articles","previous_headings":"Serocatalytic models > The model","what":"Example: seroprevalence of measles neutralising antibodies in New Haven, USA in the 1950s","title":"Serocatalytic models","text":"example, fitting dataset book “Epidemics: Models Data using R” Ottar Bjornstad, Chapter 4-3. can see age bands, median age within band, number samples band, number positive negative, seroprevalence age band (f). example subset data, excluding <1, 40-49 50+ brackets. << NOTE: data comes Black et al. 1959 paper directly, can pull include seroepirecipes. >>  Now try Stan version, implementing FOI (lambda parameter) inference using MCMC   stan model looks like :","code":"## For now, fit to data from \"Epidemics: Models and Data using R\" by Ottar Bjornstad, Chapter 4-3 library(epimdr) FALSE Loading required package: shiny FALSE Loading required package: deSolve FALSE Loading required package: polspline data(black)  ## Subsetting to specific age brackets b2 <- black[-c(1,8,9),]  knitr::kable(b2) ## [1] MLE method to estimate FOI fit <- glm(cbind(pos,neg) ~ offset(log(mid)), family=binomial(link=\"cloglog\"), data=b2) exp(fit$coef) FALSE (Intercept)  FALSE   0.1653329  ## Plot predicted and observed phi <- exp(coef(fit)) curve(1-exp(-phi*x), from=0, to=60, ylab=\"Seroprevalence\", xlab=\"Age\") points(black$mid, black$f, pch=\"*\", col=\"red\") points(b2$mid, b2$f, pch=8) ## [2] Fit this model in Stan fit_Stan <- rstan::sampling(get_stan_models()$model_serocatalytic,                  data=list(AGE_GROUPS = nrow(b2),                            age_mid = b2$mid,                            N = b2$n,                            n_seropos = b2$pos)) FALSE  FALSE SAMPLING FOR MODEL 'model_serocatalytic' NOW (CHAIN 1). FALSE Chain 1:  FALSE Chain 1: Gradient evaluation took 2.7e-05 seconds FALSE Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.27 seconds. FALSE Chain 1: Adjust your expectations accordingly! FALSE Chain 1:  FALSE Chain 1:  FALSE Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) FALSE Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) FALSE Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) FALSE Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) FALSE Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) FALSE Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) FALSE Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) FALSE Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) FALSE Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) FALSE Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) FALSE Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) FALSE Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) FALSE Chain 1:  FALSE Chain 1:  Elapsed Time: 0.05 seconds (Warm-up) FALSE Chain 1:                0.046 seconds (Sampling) FALSE Chain 1:                0.096 seconds (Total) FALSE Chain 1:  FALSE  FALSE SAMPLING FOR MODEL 'model_serocatalytic' NOW (CHAIN 2). FALSE Chain 2: Rejecting initial value: FALSE Chain 2:   Log probability evaluates to log(0), i.e. negative infinity. FALSE Chain 2:   Stan can't start sampling from this initial value. FALSE Chain 2: Rejecting initial value: FALSE Chain 2:   Log probability evaluates to log(0), i.e. negative infinity. FALSE Chain 2:   Stan can't start sampling from this initial value. FALSE Chain 2: Rejecting initial value: FALSE Chain 2:   Log probability evaluates to log(0), i.e. negative infinity. FALSE Chain 2:   Stan can't start sampling from this initial value. FALSE Chain 2: Rejecting initial value: FALSE Chain 2:   Log probability evaluates to log(0), i.e. negative infinity. FALSE Chain 2:   Stan can't start sampling from this initial value. FALSE Chain 2: Rejecting initial value: FALSE Chain 2:   Log probability evaluates to log(0), i.e. negative infinity. FALSE Chain 2:   Stan can't start sampling from this initial value. FALSE Chain 2:  FALSE Chain 2: Gradient evaluation took 1.2e-05 seconds FALSE Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. FALSE Chain 2: Adjust your expectations accordingly! FALSE Chain 2:  FALSE Chain 2:  FALSE Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) FALSE Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) FALSE Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) FALSE Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) FALSE Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) FALSE Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) FALSE Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) FALSE Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) FALSE Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) FALSE Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) FALSE Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) FALSE Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) FALSE Chain 2:  FALSE Chain 2:  Elapsed Time: 0.05 seconds (Warm-up) FALSE Chain 2:                0.051 seconds (Sampling) FALSE Chain 2:                0.101 seconds (Total) FALSE Chain 2:  FALSE  FALSE SAMPLING FOR MODEL 'model_serocatalytic' NOW (CHAIN 3). FALSE Chain 3: Rejecting initial value: FALSE Chain 3:   Log probability evaluates to log(0), i.e. negative infinity. FALSE Chain 3:   Stan can't start sampling from this initial value. FALSE Chain 3: Rejecting initial value: FALSE Chain 3:   Log probability evaluates to log(0), i.e. negative infinity. FALSE Chain 3:   Stan can't start sampling from this initial value. FALSE Chain 3: Rejecting initial value: FALSE Chain 3:   Log probability evaluates to log(0), i.e. negative infinity. FALSE Chain 3:   Stan can't start sampling from this initial value. FALSE Chain 3: Rejecting initial value: FALSE Chain 3:   Log probability evaluates to log(0), i.e. negative infinity. FALSE Chain 3:   Stan can't start sampling from this initial value. FALSE Chain 3:  FALSE Chain 3: Gradient evaluation took 1.2e-05 seconds FALSE Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. FALSE Chain 3: Adjust your expectations accordingly! FALSE Chain 3:  FALSE Chain 3:  FALSE Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) FALSE Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) FALSE Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) FALSE Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) FALSE Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) FALSE Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) FALSE Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) FALSE Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) FALSE Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) FALSE Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) FALSE Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) FALSE Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) FALSE Chain 3:  FALSE Chain 3:  Elapsed Time: 0.049 seconds (Warm-up) FALSE Chain 3:                0.047 seconds (Sampling) FALSE Chain 3:                0.096 seconds (Total) FALSE Chain 3:  FALSE  FALSE SAMPLING FOR MODEL 'model_serocatalytic' NOW (CHAIN 4). FALSE Chain 4:  FALSE Chain 4: Gradient evaluation took 1.3e-05 seconds FALSE Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. FALSE Chain 4: Adjust your expectations accordingly! FALSE Chain 4:  FALSE Chain 4:  FALSE Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) FALSE Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) FALSE Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) FALSE Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) FALSE Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) FALSE Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) FALSE Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) FALSE Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) FALSE Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) FALSE Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) FALSE Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) FALSE Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) FALSE Chain 4:  FALSE Chain 4:  Elapsed Time: 0.049 seconds (Warm-up) FALSE Chain 4:                0.05 seconds (Sampling) FALSE Chain 4:                0.099 seconds (Total) FALSE Chain 4:  ## Look at output fit_Stan FALSE Inference for Stan model: model_serocatalytic. FALSE 4 chains, each with iter=2000; warmup=1000; thin=1;  FALSE post-warmup draws per chain=1000, total post-warmup draws=4000. FALSE  FALSE              mean se_mean   sd   2.5%    25%    50%    75%  97.5% n_eff Rhat FALSE log_lambda  -1.80    0.00 0.10  -2.00  -1.87  -1.80  -1.73  -1.61  1598    1 FALSE lambda       0.17    0.00 0.02   0.14   0.15   0.17   0.18   0.20  1616    1 FALSE lp__       -70.31    0.02 0.72 -72.37 -70.47 -70.03 -69.86 -69.81  1706    1 FALSE  FALSE Samples were drawn using NUTS(diag_e) at Thu Dec 14 17:12:14 2023. FALSE For each parameter, n_eff is a crude measure of effective sample size, FALSE and Rhat is the potential scale reduction factor on split chains (at  FALSE convergence, Rhat=1).  mcmc_trace(fit_Stan, pars=\"lambda\") mcmc_areas(fit_Stan, pars=\"lambda\") data {    int<lower=0> AGE_GROUPS;   vector[AGE_GROUPS] age_mid;   int<lower=0> N[AGE_GROUPS];   int<lower=0> n_seropos[AGE_GROUPS];    }  parameters {      // log FOI   real log_lambda;  }  transformed parameters {      // FOI   real<lower=0.0> lambda;      lambda = exp(log_lambda);  }  model {      for(a in 1:AGE_GROUPS) n_seropos[a] ~ binomial(N[a], 1.0-exp(-lambda*age_mid[a]));  }"},{"path":[]},{"path":"/articles/serocatalytic_model.html","id":"time--and-age-varying-foi","dir":"Articles","previous_headings":"Serocatalytic models > Extensions","what":"Time- and age-varying FOI","title":"Serocatalytic models","text":"FOI assumed constant varies age time (example due introduction new intervention), FOI may calculated function time age \\(\\lambda(t)\\), multiple parameter values covering different time periods. << NOTE: equation come ? >> Discrete age varying FOI (one change point): \\[ \\pi(,t) = 1-exp( -[ \\lambda_{1}(-(t - \\gamma_{1}))+\\lambda_{2}(t - \\gamma_{2})]) \\] Time-varying, discrete FOI: \\[ \\pi(,t) = 1-exp (\\sum_{= t - +1   }^{= t} \\lambda_{} ) \\] model implemented part serofoi R package, described . Time-varying FOI function time: \\[ \\pi(, t) = 1 - exp(-\\int_{t-}^{} \\lambda(u)du) \\]","code":""},{"path":"/articles/serocatalytic_model.html","id":"accounting-seroreversion","dir":"Articles","previous_headings":"Serocatalytic models > Extensions","what":"Accounting seroreversion","title":"Serocatalytic models","text":"many infectious diseases, antibody response wane time point individuals previously infected may become seronegative. account , usea reversible serocatalytic model includes seroreversion parameter,\\(ρ\\). Parameters model : Seroconversion rate,\\(λ\\), mean annual rate seroconversion (negative positive) Seroreversion rate, \\(ρ\\), mean annual rate seroreversion(positive negative). \\(1/ρ\\) antibody persistence duration years proportion seropositive age \\(\\) can solved analytically : \\[ \\pi()=\\frac{\\lambda}{ \\lambda +\\rho}(1−exp(−(\\lambda+\\rho)) \\]","code":""},{"path":"/articles/serocatalytic_model.html","id":"references","dir":"Articles","previous_headings":"Serocatalytic models > Extensions","what":"References","title":"Serocatalytic models","text":"https://journals.plos.org/plosntds/article?id=10.1371/journal.pntd.0010506 https://doi.org/10.1017/S0950268809990781","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Hay. Maintainer. Isobel Routledge. . Saki Takahashi. .","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, \"jameshay218@gmail.com\" e=, c) c=, person, email=\"Isobel.Routledge@ucsf.edu\"), person, email=\"saki.takahashi@jhu.edu\")) (2023). seroepirecipes: seroepirecipes: codebase seroanalytics methods. R package version 0.1.0, https://github.com/seroanalytics/seroepirecipes.","code":"@Manual{,   title = {seroepirecipes: seroepirecipes: a codebase for seroanalytics methods},   author = {{c} and email = \"jameshay218@gmail.com\" and comment = c) and {person} and {email=\"Isobel.Routledge@ucsf.edu\")} and {person} and {email=\"saki.takahashi@jhu.edu\"))}},   year = {2023},   note = {R package version 0.1.0},   url = {https://github.com/seroanalytics/seroepirecipes}, }"},{"path":"/index.html","id":"seroepirecipes-implementations-and-tutorials-of-common-models-in-seroepidemiology-","dir":"","previous_headings":"","what":"seroepirecipes: implementations and tutorials of common models in seroepidemiology","title":"seroepirecipes: a codebase for seroanalytics methods","text":"seroepirecipes implements links R packages implementing commonly used mathematical statistical models analyzing serological data. package implements range methods R vignettes, fitting antibody kinetics models longitudinal antibody titer data, estimating force infection using serocatalytic models, inferring infection histories using time-since-infection methods. codebase accompanies literature review analytical methods seroepidemiology. tutorials use either simulated datasets serosim R-package publicly available datasets.","code":""},{"path":"/index.html","id":"developer-to-do","dir":"","previous_headings":"","what":"DEVELOPER TO DO","title":"seroepirecipes: a codebase for seroanalytics methods","text":"Include Stan models within source code rather vignette-specific scripts. Attach example datasets Move jahR antibody kinetics functions ","code":""},{"path":"/index.html","id":"contents","dir":"","previous_headings":"","what":"Contents","title":"seroepirecipes: a codebase for seroanalytics methods","text":"(WIP) Description datasets included seroepirecipes (WIP) Common considerations preparing serological data analysis (WIP) Fitting hierarchical antibody kinetics model longitudinal antibody measurements (WIP) Using mixture models classify serostatus Estimating force infection using serocatalytic models (WIP) Inferring infection histories using serosolver Upcoming vignettes: (WIP) Estimating force infection using antibody acquisition models (WIP) Infection times using reversible jump MCMC (WIP) Time-since-infection machine learning classifier","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"seroepirecipes: a codebase for seroanalytics methods","text":"can install development version seroepirecipes :","code":"if(!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"seroanalytics/seroepirecipes\")"},{"path":"/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"seroepirecipes: a codebase for seroanalytics methods","text":"Please report bugs requests issues link.","code":""},{"path":"/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"seroepirecipes: a codebase for seroanalytics methods","text":"<< TBC >> welcome contributions ideas additional vignettes model implementations. Please follow package contributing guide.","code":""},{"path":"/reference/Fast-observation-error-function-continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast observation error function continuous\nCalculate the probability of a set of observed titres given a corresponding set of predicted titres assuming continuous, bounded observations. FAST IMPLEMENTATION — Fast observation error function continuous","title":"Fast observation error function continuous\nCalculate the probability of a set of observed titres given a corresponding set of predicted titres assuming continuous, bounded observations. FAST IMPLEMENTATION — Fast observation error function continuous","text":"Fast observation error function continuous Calculate probability set observed titres given corresponding set predicted titres assuming continuous, bounded observations. FAST IMPLEMENTATION","code":""},{"path":"/reference/Fast-observation-error-function-continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast observation error function continuous\nCalculate the probability of a set of observed titres given a corresponding set of predicted titres assuming continuous, bounded observations. FAST IMPLEMENTATION — Fast observation error function continuous","text":"","code":"likelihood_func_fast_continuous(theta, obs, predicted_titres)"},{"path":"/reference/Fast-observation-error-function-continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast observation error function continuous\nCalculate the probability of a set of observed titres given a corresponding set of predicted titres assuming continuous, bounded observations. FAST IMPLEMENTATION — Fast observation error function continuous","text":"theta NumericVector, named parameter vector giving normal distribution standard deviation max observable titre obs NumericVector, vector observed log titres predicted_titres NumericVector, vector predicted log titres vector length input data giving probability observing observation given predictions","code":""},{"path":"/reference/Fast-observation-error-function-continuous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast observation error function continuous\nCalculate the probability of a set of observed titres given a corresponding set of predicted titres assuming continuous, bounded observations. FAST IMPLEMENTATION — Fast observation error function continuous","text":"likelihood observed titre","code":""},{"path":"/reference/boost_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal boost function for Neil's simple boosting/waning model — boost_function","title":"Internal boost function for Neil's simple boosting/waning model — boost_function","text":"Internal boost function Neil's simple boosting/waning model","code":""},{"path":"/reference/boost_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal boost function for Neil's simple boosting/waning model — boost_function","text":"","code":"boost_function(times, pars)"},{"path":"/reference/f_rise.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal boosting function for Ranjeva et al. — f_rise","title":"Internal boosting function for Ranjeva et al. — f_rise","text":"Internal boosting function Ranjeva et al.","code":""},{"path":"/reference/f_rise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal boosting function for Ranjeva et al. — f_rise","text":"","code":"f_rise(times, pars)"},{"path":"/reference/f_wane.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal waning function for Ranjeva et al. — f_wane","title":"Internal waning function for Ranjeva et al. — f_wane","text":"Internal waning function Ranjeva et al.","code":""},{"path":"/reference/f_wane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal waning function for Ranjeva et al. — f_wane","text":"","code":"f_wane(times, pars)"},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/kinetics_ceiling.html","id":null,"dir":"Reference","previous_headings":"","what":"Boosting and waning model with ceiling effect and asymptoting boost — kinetics_ceiling","title":"Boosting and waning model with ceiling effect and asymptoting boost — kinetics_ceiling","text":"Implements antibody kinetics model Ranjeva et al. 2019 (Nature Communications). Key features model short-term, titer-dependent boost asymptotes towards peak value rather continuing grow exponentially. waning phase biphasic -- initial proportion boost lost asymptotes steady state.","code":""},{"path":"/reference/kinetics_ceiling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boosting and waning model with ceiling effect and asymptoting boost — kinetics_ceiling","text":"","code":"kinetics_ceiling(times, pars, boost = f_rise, wane = f_wane)"},{"path":"/reference/kinetics_ceiling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boosting and waning model with ceiling effect and asymptoting boost — kinetics_ceiling","text":"times vector times solve model pars vector named model parameters boost pointer antibody boosting function (defaults f_rise) wane pointer antibody waning function (defaults f_wane) #' @details Model parameters: \"t_peak\"time peak antibody level post exposure \"peak\"peak antibody level natural scale \"k\"antibody level dependent boosting term \"y0\"starting antibody level natural scale \"w\"antibody decay rate \"frac\"proportion intial boost lost short-term waning","code":""},{"path":"/reference/kinetics_ceiling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boosting and waning model with ceiling effect and asymptoting boost — kinetics_ceiling","text":"vector antibody levels","code":""},{"path":[]},{"path":"/reference/kinetics_ceiling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boosting and waning model with ceiling effect and asymptoting boost — kinetics_ceiling","text":"","code":"pars <- c(y0=1,peak=80,k=0,t_peak=28,w=0.008,frac=0.5) times <- seq(0,1000,by=0.1) y <- kinetics_ranjeva(times,pars) #> Error in kinetics_ranjeva(times, pars): could not find function \"kinetics_ranjeva\" plot(times, y, type='l') #> Error in xy.coords(x, y, xlabel, ylabel, log): object 'y' not found"},{"path":"/reference/kinetics_gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Gamma function kinetics — kinetics_gamma","title":"Gamma function kinetics — kinetics_gamma","text":"simple scaled gamma function represent kinetics. Used Zhao et al. 2018, particular interpretable otherwise.","code":""},{"path":"/reference/kinetics_gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gamma function kinetics — kinetics_gamma","text":"","code":"kinetics_gamma(times, pars)"},{"path":"/reference/kinetics_gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gamma function kinetics — kinetics_gamma","text":"times vector times solve model pars vector named model parameters","code":""},{"path":"/reference/kinetics_gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gamma function kinetics — kinetics_gamma","text":"vector antibody levels","code":""},{"path":"/reference/kinetics_gamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gamma function kinetics — kinetics_gamma","text":"Model parameters: \"y0\"initial antibody level \"peak\"parameter scale function y-axis \"shape\"gamma distribution shape \"scale\"gamma distribution scale","code":""},{"path":[]},{"path":"/reference/kinetics_gamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gamma function kinetics — kinetics_gamma","text":"","code":"pars <- c(\"y0\"=0,\"peak\"=300,\"shape\"=1.2,\"scale\"=50) times <- seq(0,1000,by=0.1) y <- kinetics_gamma(times,pars) plot(times, y, type='l')"},{"path":"/reference/kinetics_piecewise.html","id":null,"dir":"Reference","previous_headings":"","what":"Piecewise linear model of boosting and biphasic waning — kinetics_piecewise","title":"Piecewise linear model of boosting and biphasic waning — kinetics_piecewise","text":"Simple piecewise linear model linear antibody boosting log scale followed linear biphasic waning. Model Hay et al. 2019 (PLOS Comp Biol).","code":""},{"path":"/reference/kinetics_piecewise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Piecewise linear model of boosting and biphasic waning — kinetics_piecewise","text":"","code":"kinetics_piecewise(times, pars)"},{"path":"/reference/kinetics_piecewise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Piecewise linear model of boosting and biphasic waning — kinetics_piecewise","text":"times vector times solve model pars vector named model parameters","code":""},{"path":"/reference/kinetics_piecewise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Piecewise linear model of boosting and biphasic waning — kinetics_piecewise","text":"vector antibody levels","code":""},{"path":"/reference/kinetics_piecewise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Piecewise linear model of boosting and biphasic waning — kinetics_piecewise","text":"Model parameters: \"t_i\"Timing infection \"tp\"Time peak antibody level post infection \"mu\"Magnitude boost \"dp\"Proportion boost lost short-term waning \"ts\"Duration short term waning phase \"m\"Long-term antibody waning rate \"lower_bound\"Lower bound allowable antibody levels \"y0\"True starting titer level","code":""},{"path":[]},{"path":"/reference/kinetics_piecewise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Piecewise linear model of boosting and biphasic waning — kinetics_piecewise","text":"","code":"pars <- c(\"tp\"=21,\"mu\"=8,\"dp\"=0.2,\"ts\"=50,\"m\"=0.0075,\"lower_bound\"=0, \"y0\"=0) times <- seq(0,100,by=0.1) y <- kinetics_piecewise(times,pars) plot(times, y, type='l')"},{"path":"/reference/kinetics_power_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Power function boosting and waning model — kinetics_power_function","title":"Power function boosting and waning model — kinetics_power_function","text":"Solve model described Teunis et al. 2016 (Epidemics) used Aiemjoy et al. 2022 (Lancet Microbe). addition titer-dependent boosting term used Ranjeva et al. 2019 (Nature Communications).","code":""},{"path":"/reference/kinetics_power_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power function boosting and waning model — kinetics_power_function","text":"","code":"kinetics_power_function(times, pars)"},{"path":"/reference/kinetics_power_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power function boosting and waning model — kinetics_power_function","text":"times vector times solve model pars vector named model parameters","code":""},{"path":"/reference/kinetics_power_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power function boosting and waning model — kinetics_power_function","text":"vector solved antibody levels","code":""},{"path":"/reference/kinetics_power_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power function boosting and waning model — kinetics_power_function","text":"Model parameters: \"t_peak\"time peak antibody level post exposure \"peak\"peak antibody level natural scale \"k\"antibody level dependent boosting term \"y0\"starting antibody level natural scale -- Note needs start 1 \"v\"antibody decay rate \"r\"shape antibody decay function","code":""},{"path":[]},{"path":"/reference/kinetics_power_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power function boosting and waning model — kinetics_power_function","text":"","code":"N <- 25 r <- rlnorm(N, log(1.3),0.01) ## Shape parameter v <- rexp(N,500) ## Decay rate y0 <- 1 ## Start titre k <- 0 ## Titre dependency peak <- 10^(rnorm(N,5, 1.5)) ## Peak titre  times <- seq(0,365,by=0.1) ys <- matrix(nrow=N,ncol=length(times)) for(i in 1:N){   ys[i,] <- kinetics_power_function(times, c(t_peak=21,peak=peak[i],r=r[i],v=v[i],y0=1,k=0)) } ys <- log10(ys)  plot(times,(ys[1,]),type='l',ylim=c(0,10)) for(i in 2:N){   lines(times,(ys[i,])) }"},{"path":"/reference/kinetics_power_function_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast implementation of the power-law waning antibody kinetics function — kinetics_power_function_cpp","title":"Fast implementation of the power-law waning antibody kinetics function — kinetics_power_function_cpp","text":"Fast implementation power-law waning antibody kinetics function","code":""},{"path":"/reference/kinetics_power_function_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast implementation of the power-law waning antibody kinetics function — kinetics_power_function_cpp","text":"","code":"kinetics_power_function_cpp(times, pars)"},{"path":"/reference/kinetics_power_function_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast implementation of the power-law waning antibody kinetics function — kinetics_power_function_cpp","text":"times vector times solve model pars vector named model parameters","code":""},{"path":"/reference/kinetics_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple boosting and waning kinetics — kinetics_simple","title":"Simple boosting and waning kinetics — kinetics_simple","text":"Implements biphasic boosting waning model Singanayagam et al. 2021 (Lancet ID). phenomonelogical assuming exponential growth decline, weighting two components shifts growth decline, swapping peak time. Can asymptote waning rate. NOTE: using asymptote waning function, function ** peak t_peak, slightly .","code":""},{"path":"/reference/kinetics_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple boosting and waning kinetics — kinetics_simple","text":"","code":"kinetics_simple(   times,   pars,   boost = boost_function,   wane = wane_function_asymptote )"},{"path":"/reference/kinetics_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple boosting and waning kinetics — kinetics_simple","text":"times vector times solve model pars vector named model parameters boost pointer function used calculate boosting (defaults boost_function) wane pointer function used calculate waning (defaults wane_function_asymptote)","code":""},{"path":"/reference/kinetics_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple boosting and waning kinetics — kinetics_simple","text":"vector antibody levels","code":""},{"path":"/reference/kinetics_simple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple boosting and waning kinetics — kinetics_simple","text":"Model parameters: \"t_peak\"time peak antibody level post exposure \"ymax\"peak antibody level natural scale \"\"boosting rate \"b\"waning rate \"c\"asymptote waning (can set 0, use wane_function instead wane_function_asymptote decline 0)","code":""},{"path":[]},{"path":"/reference/kinetics_simple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple boosting and waning kinetics — kinetics_simple","text":"","code":"pars<- c(a=0.3,b=0.05,c=0.75,ymax=100,t_peak=18) times <- seq(0,100,by=1) y <- kinetics_simple(times,pars) plot(times, y, type='l')"},{"path":"/reference/kinetics_simple_ode.html","id":null,"dir":"Reference","previous_headings":"","what":"Boosting and waning model based on within-host ODEs — kinetics_simple_ode","title":"Boosting and waning model based on within-host ODEs — kinetics_simple_ode","text":"Implements analytical solution ODE model described Pelleau et al. 2021 (JID).","code":""},{"path":"/reference/kinetics_simple_ode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boosting and waning model based on within-host ODEs — kinetics_simple_ode","text":"","code":"kinetics_simple_ode(times, pars)"},{"path":"/reference/kinetics_simple_ode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boosting and waning model based on within-host ODEs — kinetics_simple_ode","text":"times vector times solve model pars vector named model parameters","code":""},{"path":"/reference/kinetics_simple_ode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boosting and waning model based on within-host ODEs — kinetics_simple_ode","text":"vector antibody levels","code":""},{"path":"/reference/kinetics_simple_ode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boosting and waning model based on within-host ODEs — kinetics_simple_ode","text":"Model parameters: \"\"initial antibody level \"beta\"growth rate antibody secreting cells \"rho\"proportion B cells short-lived \"delta\"time antibody levels start increasing \"c_l\"decay rate long-lived B cells \"c_s\"decay rate short-lived B cells \"r\"antibody decay rate","code":""},{"path":[]},{"path":"/reference/kinetics_simple_ode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boosting and waning model based on within-host ODEs — kinetics_simple_ode","text":"","code":"pars <- c(\"A\"=0,\"beta\"=100,\"rho\"=0.25,\"c_s\"=0.15,\"c_l\"=0.0075,\"delta\"=0,\"r\"=0.001) times <- seq(0,1000,by=0.1) y <- kinetics_ode(times,pars) #> Error in kinetics_ode(times, pars): could not find function \"kinetics_ode\" plot(times, y, type='l') #> Error in xy.coords(x, y, xlabel, ylabel, log): object 'y' not found"},{"path":"/reference/rcpp_hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, Rcpp! — rcpp_hello","title":"Hello, Rcpp! — rcpp_hello","text":"Returns R list containing character vector c(\"foo\", \"bar\") numeric vector c(0, 1).","code":""},{"path":"/reference/rcpp_hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, Rcpp! — rcpp_hello","text":"","code":"rcpp_hello()"},{"path":"/reference/rcpp_hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, Rcpp! — rcpp_hello","text":"","code":"rcpp_hello() #> Error in rcpp_hello(): could not find function \"rcpp_hello\""},{"path":"/reference/seroepirecipes-package.html","id":null,"dir":"Reference","previous_headings":"","what":"seroepirecipes — seroepirecipes-package","title":"seroepirecipes — seroepirecipes-package","text":"seroepirecipes: implementations seroanalytical methods","code":""},{"path":[]},{"path":"/reference/wane_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal wane function for Neil's simple boosting/waning model — wane_function","title":"Internal wane function for Neil's simple boosting/waning model — wane_function","text":"Internal wane function Neil's simple boosting/waning model","code":""},{"path":"/reference/wane_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal wane function for Neil's simple boosting/waning model — wane_function","text":"","code":"wane_function(times, pars)"},{"path":"/reference/wane_function_asymptote.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal wane function for Neil's simple boosting/waning model, with added asymptote — wane_function_asymptote","title":"Internal wane function for Neil's simple boosting/waning model, with added asymptote — wane_function_asymptote","text":"Internal wane function Neil's simple boosting/waning model, added asymptote","code":""},{"path":"/reference/wane_function_asymptote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal wane function for Neil's simple boosting/waning model, with added asymptote — wane_function_asymptote","text":"","code":"wane_function_asymptote(times, pars)"}]

[{"path":[]},{"path":"/articles/serocatalytic_model.html","id":"introduction","dir":"Articles","previous_headings":"Serocatalytic models","what":"Introduction","title":" Serocatalytic Model Family","text":"Serocatalytic models used model infer Force Infection (FOI), per capita rate (per year) susceptible individuals exposed infection, cross - sectional serological surveys simplest catalytic model assumes: Force Infection constant ages time sero-reversion (loss seropositivity infection) boosting antibody response cross-reactivity Stable population size characteristics model, rate change susceptible individuals (\\(S\\)) age (\\(\\)) expressed \\[ \\frac{dS}{dt} = -\\lambda S() \\] \\(\\lambda\\) constant FOI. proportion population seropositive age \\(\\), \\(P_{}\\) can given \\[ P_{}= 1-exp(-\\lambda ) \\] Note either age (\\(\\)) time (\\(t\\)) used example . define seropositive individuals whose serum gave ELISA value normal range serum nonexposed individuals.","code":""},{"path":"/articles/serocatalytic_model.html","id":"variables-required","dir":"Articles","previous_headings":"Serocatalytic models","what":"Variables required","title":" Serocatalytic Model Family","text":"Minimum variables required model identify population wide FOI proportion seropositive age group. Additionally, seropositivity multiple timepoints can allow assessment changes FOI time. Differences FOI sub-populations demographic groups can also measured using serocatalytic models (see Table 1) Table 1 : Minimum variables required serocatalytic model depending use case","code":""},{"path":"/articles/serocatalytic_model.html","id":"example-fitting-a-basic-serocatalytic-model-in-stan","dir":"Articles","previous_headings":"Serocatalytic models","what":"Example: Fitting a basic serocatalytic model in Stan","title":" Serocatalytic Model Family","text":"example, fitting dataset book “Epidemics: Models Data using R” Ottar Bjornstad, Chapter 4-3. can see age bands, median age within band, number samples band, number positive negative, seroprevalence age band (f). example subset data, excluding <1, 40-49 50+ brackets. Next get just maximum likelihood estimate Force Infection.  Now try stan version, implementing FOI (lambda parameter) inference using MCMC   stan model looks like :","code":"## For now, fit to data from \"Epidemics: Models and Data using R\" by Ottar Bjornstad, Chapter 4-3  library(epimdr) FALSE Loading required package: shiny FALSE Loading required package: deSolve FALSE Loading required package: polspline library(rstan) FALSE Loading required package: StanHeaders FALSE Loading required package: ggplot2 FALSE rstan (Version 2.21.8, GitRev: 2e1f913d3ca3) FALSE For execution on a local, multicore CPU with excess RAM we recommend calling FALSE options(mc.cores = parallel::detectCores()). FALSE To avoid recompilation of unchanged Stan programs, we recommend calling FALSE rstan_options(auto_write = TRUE) library(bayesplot) FALSE This is bayesplot version 1.10.0 FALSE - Online documentation and vignettes at mc-stan.org/bayesplot FALSE - bayesplot theme set to bayesplot::theme_default() FALSE    * Does _not_ affect other ggplot2 plots FALSE    * See ?bayesplot_theme_set for details on theme setting  data(black)  ## Subsetting to specific age brackets b2 <- black[-c(1,8,9),]  knitr::kable(b2) ## [1] MLE method to estimate FOI fit <- glm(cbind(pos,neg) ~ offset(log(mid)), family=binomial(link=\"cloglog\"), data=b2) exp(fit$coef) FALSE (Intercept)  FALSE   0.1653329  ## Plot predicted and observed phi <- exp(coef(fit)) curve(1-exp(-phi*x), from=0, to=60, ylab=\"Seroprevalence\", xlab=\"Age\") points(black$mid, black$f, pch=\"*\", col=\"red\") points(b2$mid, b2$f, pch=8) ## [2] Fit this model in Stan fit_Stan <- stan(file=\"model_serocatalytic.stan\",                  data=list(AGE_GROUPS = nrow(b2),                            age_mid = b2$mid,                            N = b2$n,                            n_seropos = b2$pos)) FALSE  FALSE SAMPLING FOR MODEL 'model_serocatalytic' NOW (CHAIN 1). FALSE Chain 1: Rejecting initial value: FALSE Chain 1:   Log probability evaluates to log(0), i.e. negative infinity. FALSE Chain 1:   Stan can't start sampling from this initial value. FALSE Chain 1: Rejecting initial value: FALSE Chain 1:   Log probability evaluates to log(0), i.e. negative infinity. FALSE Chain 1:   Stan can't start sampling from this initial value. FALSE Chain 1:  FALSE Chain 1: Gradient evaluation took 2e-05 seconds FALSE Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.2 seconds. FALSE Chain 1: Adjust your expectations accordingly! FALSE Chain 1:  FALSE Chain 1:  FALSE Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) FALSE Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) FALSE Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) FALSE Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) FALSE Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) FALSE Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) FALSE Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) FALSE Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) FALSE Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) FALSE Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) FALSE Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) FALSE Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) FALSE Chain 1:  FALSE Chain 1:  Elapsed Time: 0.005673 seconds (Warm-up) FALSE Chain 1:                0.006154 seconds (Sampling) FALSE Chain 1:                0.011827 seconds (Total) FALSE Chain 1:  FALSE  FALSE SAMPLING FOR MODEL 'model_serocatalytic' NOW (CHAIN 2). FALSE Chain 2:  FALSE Chain 2: Gradient evaluation took 5e-06 seconds FALSE Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.05 seconds. FALSE Chain 2: Adjust your expectations accordingly! FALSE Chain 2:  FALSE Chain 2:  FALSE Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) FALSE Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) FALSE Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) FALSE Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) FALSE Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) FALSE Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) FALSE Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) FALSE Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) FALSE Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) FALSE Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) FALSE Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) FALSE Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) FALSE Chain 2:  FALSE Chain 2:  Elapsed Time: 0.005865 seconds (Warm-up) FALSE Chain 2:                0.005703 seconds (Sampling) FALSE Chain 2:                0.011568 seconds (Total) FALSE Chain 2:  FALSE  FALSE SAMPLING FOR MODEL 'model_serocatalytic' NOW (CHAIN 3). FALSE Chain 3: Rejecting initial value: FALSE Chain 3:   Log probability evaluates to log(0), i.e. negative infinity. FALSE Chain 3:   Stan can't start sampling from this initial value. FALSE Chain 3: Rejecting initial value: FALSE Chain 3:   Log probability evaluates to log(0), i.e. negative infinity. FALSE Chain 3:   Stan can't start sampling from this initial value. FALSE Chain 3:  FALSE Chain 3: Gradient evaluation took 4e-06 seconds FALSE Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.04 seconds. FALSE Chain 3: Adjust your expectations accordingly! FALSE Chain 3:  FALSE Chain 3:  FALSE Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) FALSE Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) FALSE Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) FALSE Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) FALSE Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) FALSE Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) FALSE Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) FALSE Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) FALSE Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) FALSE Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) FALSE Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) FALSE Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) FALSE Chain 3:  FALSE Chain 3:  Elapsed Time: 0.005761 seconds (Warm-up) FALSE Chain 3:                0.005163 seconds (Sampling) FALSE Chain 3:                0.010924 seconds (Total) FALSE Chain 3:  FALSE  FALSE SAMPLING FOR MODEL 'model_serocatalytic' NOW (CHAIN 4). FALSE Chain 4:  FALSE Chain 4: Gradient evaluation took 5e-06 seconds FALSE Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.05 seconds. FALSE Chain 4: Adjust your expectations accordingly! FALSE Chain 4:  FALSE Chain 4:  FALSE Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) FALSE Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) FALSE Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) FALSE Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) FALSE Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) FALSE Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) FALSE Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) FALSE Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) FALSE Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) FALSE Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) FALSE Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) FALSE Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) FALSE Chain 4:  FALSE Chain 4:  Elapsed Time: 0.005759 seconds (Warm-up) FALSE Chain 4:                0.005562 seconds (Sampling) FALSE Chain 4:                0.011321 seconds (Total) FALSE Chain 4:  ## Look at output fit_Stan FALSE Inference for Stan model: model_serocatalytic. FALSE 4 chains, each with iter=2000; warmup=1000; thin=1;  FALSE post-warmup draws per chain=1000, total post-warmup draws=4000. FALSE  FALSE              mean se_mean   sd   2.5%    25%    50%    75%  97.5% n_eff Rhat FALSE log_lambda  -1.80    0.00 0.10  -1.99  -1.86  -1.80  -1.73  -1.61  1589    1 FALSE lambda       0.17    0.00 0.02   0.14   0.15   0.17   0.18   0.20  1581    1 FALSE lp__       -70.29    0.02 0.66 -72.10 -70.46 -70.04 -69.86 -69.81  1525    1 FALSE  FALSE Samples were drawn using NUTS(diag_e) at Thu Dec 14 11:53:42 2023. FALSE For each parameter, n_eff is a crude measure of effective sample size, FALSE and Rhat is the potential scale reduction factor on split chains (at  FALSE convergence, Rhat=1).  mcmc_trace(fit_Stan, pars=\"lambda\") mcmc_areas(fit_Stan, pars=\"lambda\") data {    int<lower=0> AGE_GROUPS;   vector[AGE_GROUPS] age_mid;   int<lower=0> N[AGE_GROUPS];   int<lower=0> n_seropos[AGE_GROUPS];    }  parameters {      // log FOI   real log_lambda;  }  transformed parameters {      // FOI   real<lower=0.0> lambda;      lambda = exp(log_lambda);  }  model {      for(a in 1:AGE_GROUPS) n_seropos[a] ~ binomial(N[a], 1.0-exp(-lambda*age_mid[a]));  }"},{"path":"/articles/serocatalytic_model.html","id":"extension-1--time-or-age-varying-foi","dir":"Articles","previous_headings":"Serocatalytic models","what":"Extension 1- Time or age-varying FOI","title":" Serocatalytic Model Family","text":"FOI assumed constant varies age time (example due introduction new intervention), multiple \\(\\lambda\\) values may need estimated Discrete age varying FOI \\[ P_{,\\tau} = 1-exp( -[ \\lambda_{1}(-(\\tau - \\gamma_{1}))+\\lambda_{2}(\\tau - \\gamma_{2})]) \\] Seasonally varying FOI \\[ P_{,\\tau} = 1-exp (\\sum_{= \\tau - +1   }^{= \\tau} \\lambda_{} ) \\]","code":""},{"path":"/articles/serocatalytic_model.html","id":"extension-2---seroreversion","dir":"Articles","previous_headings":"Serocatalytic models","what":"Extension 2 - Seroreversion","title":" Serocatalytic Model Family","text":"many infectious diseases, antibody response wane time point individuals previously infected may seronegative. account , use called reverse serocatalytic model includes seroreversion parameter,\\(ρ\\). Seroconversion rate,\\(λ\\) , mean annual rate seroconversion (negative positive) Seroreversion rate, \\(ρ\\), mean annual rate seroreversion(positive negative) \\(1/ρ\\) antibody persistence duration years , proportion seropositive age \\(\\) expressed \\[ P_{}=\\frac{λ}{ λ +ρ}(1−exp(−(λ+ρ)) \\]","code":""},{"path":"/articles/serocatalytic_model.html","id":"extension-3---boosting","dir":"Articles","previous_headings":"Serocatalytic models","what":"Extension 3 - Boosting","title":" Serocatalytic Model Family","text":"model multiple infections","code":""},{"path":"/articles/serocatalytic_model.html","id":"references","dir":"Articles","previous_headings":"Serocatalytic models","what":"References","title":" Serocatalytic Model Family","text":"https://journals.plos.org/plosntds/article?id=10.1371/journal.pntd.0010506 https://doi.org/10.1017/S0950268809990781","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Hay. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, \"jameshay218@gmail.com\" e=, c) c=, person, email=\"Isobel.Routledge@ucsf.edu\"), person, email=\"saki.takahashi@jhu.edu\")) (2023). seroepirecipes: Codebase seroanalytics methods. R package version 0.1.0, https://github.com/seroanalytics/seroepirecipes.","code":"@Manual{,   title = {seroepirecipes: Codebase of seroanalytics methods},   author = {{c} and email = \"jameshay218@gmail.com\" and comment = c) and {person} and {email=\"Isobel.Routledge@ucsf.edu\")} and {person} and {email=\"saki.takahashi@jhu.edu\"))}},   year = {2023},   note = {R package version 0.1.0},   url = {https://github.com/seroanalytics/seroepirecipes}, }"},{"path":"/index.html","id":"seroepirecipes-implementations-and-tutorials-of-common-models-in-seroepidemiology-","dir":"","previous_headings":"","what":"seroepirecipes: implementations and tutorials of common models in seroepidemiology","title":"Codebase of seroanalytics methods","text":"seroepirecipes implements links R packages implementing commonly used mathematical statistical models analyzing serological data. implement range methods R vignettes, fitting antibody kinetics models longitudinal antibody titer data, estimating force infection using serocatalytic models, inferring infection histories using time-since-infection methods.","code":""},{"path":"/index.html","id":"contents","dir":"","previous_headings":"","what":"Contents","title":"Codebase of seroanalytics methods","text":"Description datasets included seroepirecipes Fitting hierarchical antibody kinetics model longitudinal antibody measurements Using mixture models classify serostatus Estimating force infection using serocatalytic models Infection times using reversible jump MCMC Inferring infection histories using serosolver","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Codebase of seroanalytics methods","text":"can install development version seroepirecipes GitHub :","code":"if(!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"seroanalytics/seroepirecipes\")"},{"path":"/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Codebase of seroanalytics methods","text":"Please report bugs requests issues link.","code":""},{"path":"/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Codebase of seroanalytics methods","text":"<< TBC >> welcome contributions ideas additional vignettes model implementations. Please follow package contributing guide.","code":""},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/rcpp_hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, Rcpp! — rcpp_hello","title":"Hello, Rcpp! — rcpp_hello","text":"Returns R list containing character vector c(\"foo\", \"bar\") numeric vector c(0, 1).","code":""},{"path":"/reference/rcpp_hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, Rcpp! — rcpp_hello","text":"","code":"rcpp_hello()"},{"path":"/reference/rcpp_hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, Rcpp! — rcpp_hello","text":"","code":"rcpp_hello() #> Error in rcpp_hello(): could not find function \"rcpp_hello\""}]
